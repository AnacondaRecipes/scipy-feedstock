{% set version = "1.9.0" %}
{% set numpy = "1.19" %}  # [py==38 or py==39]
{% set numpy = "1.21" %}  # [py>39]

package:
  name: scipy
  version: {{ version }}

# use 'python_impl' in meta.yaml so it gets picked up by rendering
# [python_impl == "pypy"]

source:
  # The sdist distributed by scipy contains pre-compiled pythran sources,
  # as well as the boost-headers submodule (since 1.7.0).
  - url: https://github.com/scipy/scipy/archive/refs/tags/v{{ version }}.tar.gz
    sha256: dd773d72500bbe607fe05251a8dd2439b6b38fe3133a7fc05ced82303ca73e95
    patches:
      - patches/0002-arff-nodata-test-remove-endian-check.patch  # [s390x]
  # https://github.com/scipy/scipy/tree/v{{ version }}/scipy/_lib
  - url: https://github.com/scipy/boost-headers-only/archive/2a1a7e920f39c44440d6908a080810abe9510f42.tar.gz
    sha256: 6c5cfff0650c5d0b933e6e804eb520f228c8910d85cd4839268c01acf92b4c7c
    folder: scipy/_lib/boost
  - url: https://github.com/scipy/HiGHS/archive/4a122958a82e67e725d08153e099efe4dad099a2.tar.gz
    sha256: 8ce0e816d8c7517c95e0e404648eef3aaee0d5b919226b46f592c87a4eca24f4
    folder: scipy/_lib/highs
  - url: https://github.com/scipy/unuran/archive/a63d39160e5ecc4402e7ed0e8417f4c3ff9634cb.tar.gz
    sha256: 2412fdb1d46cc5c677d7fe2b42895f444b2c544040f835083cf814ca93e8c2f5
    folder: scipy/_lib/unuran
  # https://github.com/scipy/scipy/tree/v{{ version }}/scipy/sparse/linalg/_propack
  - url: https://github.com/scipy/PROPACK/archive/92f466393256df649fc8542c39dd647816dded25.tar.gz
    sha256: e0069ac6b2f888838ff14f1c5696759914bb451ac60607d1d41c4d6ff0c37324
    folder: scipy/sparse/linalg/_propack/PROPACK

build:
  number: 0
  skip: true  # [py<=37]
  missing_dso_whitelist:  # [linux and s390x]
    - $RPATH/ld64.so.1    # [linux and s390x]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    # pythran code needs clang-cl on windows
    - clang                                  # [win]
    - {{ compiler('fortran') }}
    - patch         # [unix]
    - m2-patch      # [win]
    - pkg-config    # [osx]
  host:
    - python
    - cython >=0.29.21,<3.0
    - pybind11 >=2.4.3,<2.10.0    
    - fftw  # [not (linux and s390x)]
    - pythran >=0.11.0,<0.12.0
    - setuptools <60
    - wheel <0.38.0
    - numpy >={{ numpy }},<1.25.0
    - pip >=18.0.0
    - mkl-devel  {{ mkl }}  # [blas_impl == 'mkl']
    # pin intel-openmp to the same version as mkl, without this build may fail with
    # Intel MKL FATAL ERROR: Cannot load libmkl_intel_thread.dylib.
    # It may be needed to make this pinning explicit in the mkl package
    - intel-openmp {{ mkl }}         # [blas_impl == 'mkl']
    - openblas-devel {{ openblas }}  # [blas_impl == 'openblas']
  run:
    - python
    # https://github.com/scipy/scipy/blob/v1.9.0/setup.py#L452
    - numpy >={{ numpy }},<1.25.0

{% set tests_to_skip = "_not_a_real_test" %}
# skip a test that fails with MKL + AVX512 (non-AVX512 passes)
{% set tests_to_skip = tests_to_skip + " or test_x0_equals_Mb[bicgstab]" %}
# these multithreading tests occasionally hang in emulation
{% set tests_to_skip = tests_to_skip + " or test_immediate_updating" %}         # [ppc64le]
{% set tests_to_skip = tests_to_skip + " or test_mixed_threads_processes" %}    # [ppc64le]
{% set tests_to_skip = tests_to_skip + " or test_multiprocess[fft]" %}          # [ppc64le]
{% set tests_to_skip = tests_to_skip + " or (test__differential_evolution and test_parallel)" %}  # [ppc64le]
# on the slowest agents, these tests take more than 20min in emulation
{% set tests_to_skip = tests_to_skip + " or (test_lsq_linear and test_large_rank_deficient)" %}   # [ppc64le]

# propack tests segfault when calling mkl_blas.cdotc (). see: https://github.com/scipy/scipy/issues/15108
{% set tests_to_skip = tests_to_skip + " or test_svdp"                        %} # [(x86_64 or s390x or arm64) and py>39]
{% set tests_to_skip = tests_to_skip + " or test_examples"                    %} # [(x86_64 or s390x or arm64) and py>39]
{% set tests_to_skip = tests_to_skip + " or test_concatenate_int32_overflow"  %} # [(x86_64 or s390x or arm64) and py>39]

# skip failing linalg tests mpmath tests
{% set tests_to_skip = tests_to_skip + " or test_jacobi_int"   %} # [s390x and py>39]

# skip failing linalg tests
{% set tests_to_skip = tests_to_skip + " or test_qz_single"     %} # [osx-64]
{% set tests_to_skip = tests_to_skip + " or test_gges_tgexc"    %} # [osx-64]

test:
  imports:
    - scipy
    # reference for public API is effectively
    # https://github.com/scipy/scipy/blob/master/scipy/_lib/tests/test_public_api.py
    - scipy.cluster
    - scipy.cluster.hierarchy
    - scipy.cluster.vq
    - scipy.constants
    - scipy.fft
    - scipy.fftpack
    - scipy.integrate
    - scipy.interpolate
    - scipy.io
    - scipy.io.arff
    - scipy.io.matlab
    - scipy.io.wavfile
    - scipy.linalg
    - scipy.linalg.blas
    - scipy.linalg.cython_blas
    - scipy.linalg.cython_lapack
    - scipy.linalg.interpolative
    - scipy.linalg.lapack
    - scipy.misc
    - scipy.ndimage
    - scipy.odr
    - scipy.optimize
    - scipy.signal
    - scipy.signal.windows
    - scipy.sparse
    - scipy.sparse.csgraph
    - scipy.sparse.linalg
    - scipy.spatial
    - scipy.spatial.distance
    - scipy.spatial.transform
    - scipy.special
    - scipy.stats
    - scipy.stats.contingency
    - scipy.stats.distributions
    - scipy.stats.mstats
    - scipy.stats.qmc
    - scipy.stats.sampling
  requires:
    - pytest
    - pytest-timeout
    - pytest-xdist
    - mpmath
    - threadpoolctl
    # see commend above
    - intel-openmp {{ mkl }}  # [blas_impl == 'mkl']
  commands:
    # show SIMD features (some failures occur depending on presence/absence of e.g. AVX512)
    - python -c "import numpy; numpy.show_config()"
    # the tests ppc64le and aarch64 are currently run through emulation in QEMU;
    # since this takes much longer, do not run the most heavy-weight tests, i.e. use
    # label='fast'; same for PyPy due to huge runtime; otherwise set label='full'
    {% set label = "'fast'" if (aarch64 or ppc64le or python_impl == "pypy") else "'full'" %}
    # for signature of scipy.test see below (note default: label='fast'):
    # https://github.com/scipy/scipy/blob/v1.7.0/scipy/_lib/_testutils.py#L27
    {% set param = "verbose=2, label=" + label + ", tests=None" %}
    {% set extra = "extra_argv=['-vv', '-k', 'not (" + tests_to_skip + ")', '-nauto', '--timeout=1200', '--durations=50']" %}
    - python -c "import scipy, sys; sys.exit(not scipy.test({{ param }}, {{ extra }}))"
    # NOTE: test suite is skipped on ppc due to bugs in QEMU code that cause
    # CI to fail, even though the tests would run through on native hardware

about:
  home: https://www.scipy.org/
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE.txt
  summary: Scientific Library for Python
  description: |
    SciPy is a Python-based ecosystem of open-source software for mathematics,
    science, and engineering.
  doc_url: https://www.scipy.org/docs.html
  dev_url: https://github.com/scipy/scipy

extra:
  recipe-maintainers:
    - jakirkham
    - msarahan
    - rgommers
    - ocefpaf
    - h-vetinari
